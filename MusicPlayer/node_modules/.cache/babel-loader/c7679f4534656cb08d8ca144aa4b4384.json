{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\xF6mer\\\\Documents\\\\GitHub\\\\MusicPlayer\\\\MusicPlayer\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\nimport data from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const audioRef = useRef(null);\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n\n  const updateTimeHandler = e => {\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime,\n      duration\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    let nextSong = songs[(currentIndex + 1) % songs.length];\n    await setCurrentSong(nextSong);\n    const newSongs = songs.map(song => {\n      if (song.id === nextSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    libraryStatus: libraryStatus,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      songInfo: songInfo,\n      setSongInfo: setSongInfo,\n      songs: songs,\n      setSongs: setSongs,\n      songEndHandler: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      songInfo: songInfo,\n      setSongInfo: setSongInfo,\n      songs: songs,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: updateTimeHandler,\n      onTimeUpdate: updateTimeHandler,\n      onEnded: songEndHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"mvI6fhNLsFxRZO2EGj0NQsaXBuc=\");\n\n_c = App;\nconst AppContainer = styled.div`\n\ttransition: all 0.5s ease;\n\tmargin-left: ${p => p.libraryStatus ? \"20rem\" : \"0\"};\n\t@media screen and (max-width: 768px) {\n\t\tmargin-left: 0;\n\t}\n`;\n_c2 = AppContainer;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppContainer\");","map":{"version":3,"sources":["C:/Users/Ã¶mer/Documents/GitHub/MusicPlayer/MusicPlayer/src/App.js"],"names":["React","useState","useRef","styled","Player","Song","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","libraryStatus","setLibraryStatus","songInfo","setSongInfo","currentTime","duration","updateTimeHandler","e","target","songEndHandler","currentIndex","findIndex","song","id","nextSong","length","newSongs","map","active","current","play","audio","AppContainer","div","p"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\nimport data from \"./data\";\n\nconst App = () => {\n\tconst audioRef = useRef(null);\n\n\tconst [songs, setSongs] = useState(data());\n\tconst [currentSong, setCurrentSong] = useState(songs[0]);\n\tconst [isPlaying, setIsPlaying] = useState(false);\n\tconst [libraryStatus, setLibraryStatus] = useState(false);\n\tconst [songInfo, setSongInfo] = useState({\n\t\tcurrentTime: 0,\n\t\tduration: 0,\n\t});\n\n\tconst updateTimeHandler = (e) => {\n\t\tconst currentTime = e.target.currentTime;\n\t\tconst duration = e.target.duration;\n\t\tsetSongInfo({ ...songInfo, currentTime, duration });\n\t};\n\n\tconst songEndHandler = async () => {\n\t\tlet currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n\t\tlet nextSong = songs[(currentIndex + 1) % songs.length];\n\t\tawait setCurrentSong(nextSong);\n\n\t\tconst newSongs = songs.map((song) => {\n\t\t\tif (song.id === nextSong.id) {\n\t\t\t\treturn {\n\t\t\t\t\t...song,\n\t\t\t\t\tactive: true,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\t...song,\n\t\t\t\t\tactive: false,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tsetSongs(newSongs);\n\n\t\tif (isPlaying) {\n\t\t\taudioRef.current.play();\n\t\t}\n\t};\n\n\treturn (\n\t\t<AppContainer libraryStatus={libraryStatus}>\n\t\t\t<Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} isPlaying={isPlaying}\n\t\t\t\tsetIsPlaying={setIsPlaying}\n\t\t\t\tcurrentSong={currentSong}\n\t\t\t\tsetCurrentSong={setCurrentSong}\n\t\t\t\taudioRef={audioRef}\n\t\t\t\tsongInfo={songInfo}\n\t\t\t\tsetSongInfo={setSongInfo}\n\t\t\t\tsongs={songs}\n\t\t\t\tsetSongs={setSongs}\n\t\t\t\tsongEndHandler={songEndHandler}\n\t\t\t/>\n\t\t\t<Song currentSong={currentSong} />\n\t\t\t<Player\n\t\t\t\tisPlaying={isPlaying}\n\t\t\t\tsetIsPlaying={setIsPlaying}\n\t\t\t\tcurrentSong={currentSong}\n\t\t\t\tsetCurrentSong={setCurrentSong}\n\t\t\t\taudioRef={audioRef}\n\t\t\t\tsongInfo={songInfo}\n\t\t\t\tsetSongInfo={setSongInfo}\n\t\t\t\tsongs={songs}\n\t\t\t\tsetSongs={setSongs}\n\t\t\t/>\n\t\t\t<Library\n\t\t\t\tsongs={songs}\n\t\t\t\tsetCurrentSong={setCurrentSong}\n\t\t\t\taudioRef={audioRef}\n\t\t\t\tisPlaying={isPlaying}\n\t\t\t\tsetSongs={setSongs}\n\t\t\t\tlibraryStatus={libraryStatus}\n\t\t\t/>\n\t\t\t<audio\n\t\t\t\tonLoadedMetadata={updateTimeHandler}\n\t\t\t\tonTimeUpdate={updateTimeHandler}\n\t\t\t\tonEnded={songEndHandler}\n\t\t\t\tref={audioRef}\n\t\t\t\tsrc={currentSong.audio}\n\t\t\t/>\n\t\t</AppContainer>\n\t);\n};\n\nconst AppContainer = styled.div`\n\ttransition: all 0.5s ease;\n\tmargin-left: ${(p) => (p.libraryStatus ? \"20rem\" : \"0\")};\n\t@media screen and (max-width: 768px) {\n\t\tmargin-left: 0;\n\t}\n`;\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}